///////////////////////////////////////////////////////////////////////////////
//GENERATES THE COMPLETE LIST OF STANDARD DETERMINANTAL H-VECTORS OF THE FORM//
//[1,C,...,T] OF LENGTH S+1, FOR WHICH CONJECTURE [*] IS NOT KNOWN.          //
//                                                                           //
//CONJECTURE [*] STATES: THE H-VECTOR OF A STANDARD DETERMINATNAL IDEAL IS A //
//PURE O-SEQUENCE <=> ITS DEGREE MATRIX(^) HAS EQUAL ROWS.                   //
//                                                                           //
//(*)  <= IS KONWN.                                                          //
//                                                                           //
//(^) A DEGREE MATRIX HAS: - WEAKLY INCREASING ROWS                          //
//                         - WEAKLY DECREASING COLUMNS                       //
//                         - POSITIVE ENTRIES ON THE DIAGONAL                //
//                         - NO ENTIES EQUAL TO ZERO                         //
///////////////////////////////////////////////////////////////////////////////
//////////////////////implemented by Alexandru Constnatninescu For CoCoA-4.7///
///////////////////////////////////////////////////////////////////////////////

//The files called by "Source" have To be In the same folder

Source "HVectorFromMatrixFunction.coc";
Source "TruncatedCube.coc";  
Source "UsualFunctions.coc";
Source "partitions.coc";//imports the list of all partitions of n<=26. To be used as PART[N,D] = list of all partitions of N of length D.
Source "permutedPartitions.coc";//gets the list of all permutations of all partitions of n<=26. To be used as PERPART[N,D] = list of all partitions of N of length D.

//Source "partitions2.coc"; //uncomment just For large cases (partitions from 27 To 29)
//PART:=Concat(PART,PART2); //uncomment just For large cases (glues all partitions up To 29)
//more partitions can be generated with polymake Using the instructions in "generatePartitions"


///////////////////////////////////////////////////////////////////////////////

For Codim:=3 To 3 Do//the range of the comdimension (1,Codim,....)
  For Rows:=3 To 3 Do//the number of maximal rows
    CMtype:=Bin(Rows+Codim-2,Codim-1);//the last entry depends only On Codim And Rows (1,Codim,...,CMtype)
    MINLEN:=Rows+2*(Codim-1);//the minimum length with these parameters
    MINLEFT:=MINLEN+Codim-1;//the minimum sum of the first Codim+Rows entries In the first row. 
    TP:=Sprint(CMtype);
    CD:=Sprint(Codim);
    For LEN:=MINLEN To 20 Do//the range of the length of the h-Vector (h_0,...., h_LEN)
      PrintLn;
      PrintLn("================================================================");
      PrintLn(" Codim = ",Codim,"    CM type = ",CMtype," of length = ",LEN);
      PrintLn("================================================================");  
      Len:=Sprint(LEN);
      FILE:=OpenOFile("DetVects_"+CD+"_"+TP+"_"+Len+".coc","w");
      VECTS:=[];//the list of the h-vectors
      For SPLIT:= MINLEFT To (LEN+Codim-1) Do//Split the partitions In 2: maximal rows | smaller rows
	PartL:=[A In PART[SPLIT,Codim+Rows-1]| A[Rows+1]-A[1]>1];//all choices For the maximal rows (condition allows the 1st entry in a smaller row to be negative)
	PartR:=Flatten(PERPART[LEN+Codim-SPLIT],1);//all choices For the smaller rows
	MDiag:=[Flatten(A,1)| A In PartL><PartR];//all choices for the entries of the degreematrix which determine the length of the h-Vector
	COUNT:=0;//counter
	Foreach A In MDiag Do
	  T:=Len(A)-Codim+1;//the number of rows in the matrix
	  DELTAUP:=[Sum([A[Rows+B*(Codim-1)+Mod(K,Codim-1)]-1| B In 0..Div(K,Codim-1)])| K In 1..(T-Rows)];//the upper bounds For the Deltas: Delta_i = Row_r+i - Row_r.
	  DELTALOW:=Concat([Max([A[1]+1,A[Codim+Rows-1]-A[Codim+Rows]])],
			   [A[Codim+Rows-1]-A[Codim+Rows-1+K]| K In 2..(Len(A)-Codim-Rows+1)]);//the lower bounds For the Deltas.
	  If Min(ComponentwiseDiff(DELTAUP,DELTALOW))>-1 Then//test lower bound+1 < upper bound.      
	    Foreach D In TruncateCube(T-Rows,Max(DELTAUP)-DELTALOW[1]) Do
	      DD:=NewList(T-Rows);//the Deltas will be defined from entries In the Truncated multicube
	      DD[1]:=DELTALOW[1]+D[1];
	      For J:=2 To (T-Rows) Do DD[J]:=DD[J-1]+D[J];EndFor;
	      MAXR:=Concat([A[I]| I In 1..(Rows+Codim-1)],[A[Rows+Codim-1+K]+DD[K]| K In 1..Len(DD)]);//the complete  maximal row
	      COUNT:=COUNT+1;
	      If Type(COUNT/10000) = INT Then Print(COUNT," ");EndIf;//Print every 10000 counter
	      If MAXR=Sorted(MAXR) Then//check that the maximal row is weakly increasing
		TEST:=1;
		J:=0;
		DM:=[MAXR| K In 1..Rows];//the degree matrix with only the maximal rows for now
		While TEST=1 And (J<Len(DD)) Do
		  J:=J+1;
		  ROW:=[MAXR[K]-DD[J]| K In 1..(T+Codim-1)];
		  If (ROW[1]<0) And (ROW[Rows+J]>0) And (Not(0 IsIn ROW)) Then Append(DM,ROW);//
		  Else TEST:=0;
		  EndIf;
		EndWhile;	
		If TEST=1 Then Append(VECTS,HV(DM)); EndIf;//append the h-Vector of DM To the list, if the matrix has the right properties
	      EndIf;
	    EndForeach;
	  EndIf;
	EndForeach;
      EndFor;
      Print "DetVects_"+CD+"_"+TP+"_"+Len+":=" On FILE;//Print the list on file
      Print VECTS On FILE;
      Print ";" On FILE;
      Close(FILE);
    EndFor;
  EndFor;
EndFor;

/////////////////////
/////END OF FILE/////
/////////////////////